input {
  lumberjack {
    port => 5000
    ssl_certificate => "/etc/logstash/ssl/lumberjack.crt"
    ssl_key => "/etc/logstash/ssl/lumberjack.key" 
  }
}
filter {
    
  if [message] =~ "statistic-interceptor" {

    # Message example:
    # 25 May 2016 14:52:44,195 INFO  [statistic-interceptor] (xxxxx.statistic.ProcessingStatisticInterceptor$StatisticTimerTask.run:159)  - {"processingCounters":{"OK":0,"ERROR":0,"ARCHIVE":0,"UNDEFINED":0}}

    grok {
      match => { "message" => ".*\[%{GREEDYDATA:system}\] \(%{GREEDYDATA:module}\)\s*-\s*%{GREEDYDATA:statistics_message}" }
    }

    json {
      source => "statistics_message"
      add_tag => "statistics_message"
    }
  }

  if [type] == "flume-log" {
    grok {
      match => { "message" => "(?<json_message>.*)"}
    }
  }

  if [type] == "cloudera-agent" {
    grok {
      match => { "message" => "\[(?<timestamp>.*).\+.....\s+\d+\s+(?<header>.*)\s+(?<severity>ERROR|INFO|OFF|FATAL|WARN|DEBUG|TRACE)\s+(?<logmessage>.*)"}
    }
  }

  if [type] == "cloudera-app" {
    grok {
      match => { "message" => "%{WORD:severity}](?<timestamp>.*\d+\d+)Z(?<log>.\w+.\w+.\w+.\w+)(?<json_message>.*)" }
    }
  }

  json {
    source => "json_message"
  }
  
  if "_grokparsefailure" in [tags] { drop {} } 
}

output { 
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "logs"
  }

  if "statistics_message" in [tags] {
    statsd {
      host => "statsd"
      gauge => {
        "processingCounters.OK" => "%{[processingCounters][OK]}"
        "processingCounters.ARCHIVE" => "%{[processingCounters][ARCHIVE]}"
        "processingCounters.ERROR" => "%{[processingCounters][ERROR]}"
      }
    }
  } 
}
